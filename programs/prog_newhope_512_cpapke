#############################################
# NEWHOPE-512
#############################################

# Must be the first instruction
config ( n = 512 , q = 12289 )
# Must be the first instruction

# Specify "define" flags here
# `define KEYGEN
# `define ENCRYPT
# `define DECRYPT

#############################################
# NEWHOPE-512.CPAPKE.KEYGEN
#############################################

`ifdef KEYGEN

# Inputs  : SEED = ( r0 )
# Outputs : PK = ( r0 , Poly_0 ) ; SK = ( Poly_9 )

random ( r0 )
print ( r0 )

sha3_init
sha3_512_absorb ( r0 )
r0 || r1 = sha3_512_digest

# Gen (a)
rej_sample ( prng = SHAKE-128 , seed = r0 , c0 = 0 , c1 = 0 , poly = 0 )

# Sample (s)
bin_sample ( prng = SHAKE-256 , seed = r1 , c0 = 0 , c1 = 0 , k = 8 , poly = 1 )

# Sample (e)
bin_sample ( prng = SHAKE-256 , seed = r1 , c0 = 0 , c1 = 1 , k = 8 , poly = 2 )

# NTT (s)
mult_psi ( poly = 1 )
transform ( mode = DIF_NTT , poly_dst = 9 , poly_src = 1 )

# NTT (e)
mult_psi ( poly = 2 )
transform ( mode = DIF_NTT , poly_dst = 10 , poly_src = 2 )

# a * NTT (s)
poly_op ( op = MUL , poly_dst = 0 , poly_src = 9 )

# a * NTT (s) + NTT (e)
poly_op ( op = ADD , poly_dst = 0 , poly_src = 10 )

print ( r0 )
save ( r0 , "data/newhope_512/pk_1.npy" )
print ( poly = 0 )
save ( poly = 0 , "data/newhope_512/pk_2.npy" )
print ( poly = 9 )
save ( poly = 9 , "data/newhope_512/sk.npy" )

`endif

#############################################
# NEWHOPE-512.CPAPKE.ENCRYPT
#############################################

`ifdef ENCRYPT

# Inputs  : PK = ( r0 , Poly_3 ) ; COIN = ( r1 ) ; PTXT = ( Poly_15 )
# Outputs : CTXT = ( Poly_0 , Poly_1 )

load ( r0 , "data/newhope_512/pk_1.npy" )
print ( r0 )
load ( poly = 3 , "data/newhope_512/pk_2.npy" )
print ( poly = 3 )
random ( r1 )
print ( r1 )
random ( poly = 15 , encoding = BINARY_2RED, "data/newhope_512/pt_in.npy" )
print ( poly = 15 )

# Gen (a)
rej_sample ( prng = SHAKE-128 , seed = r0 , c0 = 0 , c1 = 0 , poly = 0 )

# Sample (s')
bin_sample ( prng = SHAKE-256 , seed = r1 , c0 = 0 , c1 = 0 , k = 8 , poly = 1 )

# Sample (e')
bin_sample ( prng = SHAKE-256 , seed = r1 , c0 = 0 , c1 = 1 , k = 8 , poly = 2 )

# NTT (s')
mult_psi ( poly = 1 )
transform ( mode = DIF_NTT , poly_dst = 9 , poly_src = 1 )

# NTT (e')
mult_psi ( poly = 2 )
transform ( mode = DIF_NTT , poly_dst = 10 , poly_src = 2 )

# a * NTT (s')
poly_op ( op = MUL , poly_dst = 0 , poly_src = 9 )

# a * NTT (s') + NTT (e')
poly_op ( op = ADD , poly_dst = 0 , poly_src = 10 )

# b * NTT (s')
poly_op ( op = MUL , poly_dst = 9 , poly_src = 3 )

# INTT (b * NTT (s'))
transform ( mode = DIT_INTT , poly_dst = 1 , poly_src = 9 )
mult_psi_inv ( poly = 1 )

# Sample (e")
bin_sample ( prng = SHAKE-256 , seed = r1 , c0 = 0 , c1 = 2 , k = 8 , poly = 8 )

# INTT (b * NTT (s')) + e"
poly_op ( op = ADD , poly_dst = 1 , poly_src = 8 )

# INTT (b * NTT (s')) + e" + v
poly_op ( op = ADD , poly_dst = 1 , poly_src = 15 )

print ( poly = 0 )
save ( poly = 0 , "data/newhope_512/ct_1.npy" )
print ( poly = 1 )
save ( poly = 1 , "data/newhope_512/ct_2.npy" )

`endif

#############################################
# NEWHOPE-512.CPAPKE.DECRYPT
#############################################

`ifdef DECRYPT

# Inputs  : CTXT = ( Poly_0 , Poly_2 ) ; SK = ( Poly_8 )
# Outputs : PTXT = ( Poly_15 )

load ( poly = 0 , "data/newhope_512/ct_1.npy" )
print ( poly = 0 )
load ( poly = 2 , "data/newhope_512/ct_2.npy" )
print ( poly = 2 )
load ( poly = 8 , "data/newhope_512/sk.npy" )
print ( poly = 8 )

# NTT (u * s)
poly_op ( op = MUL , poly_dst = 0 , poly_src = 8 )

# u * s
transform ( mode = DIT_INTT , poly_dst = 15 , poly_src = 0 )
mult_psi_inv ( poly = 15 )

# v - (u * s)
poly_op ( op = SUB , poly_dst = 15 , poly_src = 2 )

print ( poly = 15 )
save ( poly = 15 , "data/newhope_512/pt_out.npy" )
#encode_print ( poly = 15 , encoding = BINARY_2RED )
encode_compare ( "data/newhope_512/pt_in.npy" , "data/newhope_512/pt_out.npy" , encoding = BINARY_2RED )

`endif

end
